import java.util.Scanner;

public class pyramid {

    char stck[];
    int top = -1;
    int maxSize;  // Limit for the stack

    // Constructor to initialize stack with a limit
    public pyramid(int size) {
        maxSize = size;
        stck = new char[maxSize];
    }

    // Check if the stack is empty
    boolean isEmpty() {
        return top == -1;
    }

    // Check if the stack is full
    boolean isFull() {
        return top == maxSize - 1;
    }

    // Push method to add data to the stack
    void push(char data) {
        if (isFull()) {
            System.out.println("Stack Overflow!");
        } else {
            top++;
            stck[top] = data;
            System.out.println("Pushed " + data);
        }
    }

    // Pop method to remove data from the stack
    void pop() {
        if (isEmpty()) {
            System.out.println("Stack Underflow!");
        } else {
            char poppedData = stck[top];
            System.out.println("Popped " + poppedData);
            top--;
        }
    }

    // Peek method to see the top element of the stack
    char peek() {
        if (isEmpty()) {
            System.out.println("Stack is Empty");
            return '\0';  // Return null character if the stack is empty
        } else {
            return stck[top];
        }
    }

    // Size method to get the size of the stack
    int size() {
        return top + 1;
    }

    // Display method to print all elements of the stack
    void display() {
        if (isEmpty()) {
            System.out.println("Stack is Empty!");
        } else {
            System.out.println("Stack elements:");
            for (int i = top; i >= 0; i--) {
                System.out.println(stck[i]);
            }
        }
    }

    // Main method
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Enter the size of the stack:");
        int size = scanner.nextInt();
        pyramid stack = new pyramid(size);  // Create a stack with the specified limit
        
        boolean exit = false;
        
        while (!exit) {
            System.out.println("\nChoose an operation:");
            System.out.println("1. Push");
            System.out.println("2. Pop");
            System.out.println("3. Peek");
            System.out.println("4. Display Stack");
            System.out.println("5. Exit");
            int choice = scanner.nextInt();
            
            switch (choice) {
                case 1:
                    System.out.println("Enter a character to push:");
                    char data = scanner.next().charAt(0);
                    stack.push(data);
                    break;
                    
                case 2:
                    stack.pop();
                    break;
                    
                case 3:
                    char topElement = stack.peek();
                    if (topElement != '\0') {
                        System.out.println("Top element is: " + topElement);
                    }
                    break;
                    
                case 4:
                    stack.display();
                    break;
                    
                case 5:
                    exit = true;
                    break;
                    
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }
        
        scanner.close();
    }
}

